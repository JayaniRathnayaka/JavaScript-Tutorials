1. Write a JavaScript function to calculate the sum of two numbers. 1. Write a JavaScript function to calculate the sum of two numbers.  

function sumOfTwoNumbers(a, b) { 

  return a + b; 

} 

2. Write a JavaScript program to find the maximum number in an array. 

function findMaxNumber(arr) { 

  return Math.max(…arr); 

} 

3. Write a JavaScript function to check if a given string is a palindrome (reads the same forwards and backwards). 


function isPalindrome(str) { 

  return str === str.split(”).reverse().join(”); 

}

4. Write a JavaScript program to reverse a given string. 

const reverseString = (str) => str.split(”).reverse().join(”); 

 5. Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers. 


function filterEvenNumbers(numbers) { 

  return numbers.filter(num => num % 2 === 0); 

}

6. Write a JavaScript program to calculate the factorial of a given number. 
A factorial number is the product of all positive integers, which are equal to or less than the given number.  

function factorial(number) { 

  if (number === 0 || number === 1) { 

    return 1; 

  } else { 

    return number * factorial(number – 1); 

  } 

} 

7. Write a JavaScript function to check if a given number is prime. 

To check if a given number is prime, loop from 2 to the square root of the number. If any integer evenly divides it, the number is not prime. 

function isPrime(num) { 

  if (num <= 1) return false; 

  for (let i = 2; i <= Math.sqrt(num); i++) { 

    if (num % i === 0) return false; 

  } 

  return true; 

} 

8. Write a JavaScript program to find the largest element in a nested array. 


function findLargestElement(nestedArray) { 

  let largest = nestedArray[0][0]; 

  for (let arr of nestedArray) { 

    for (let num of arr) { 

      if (num > largest) { 

        largest = num; 

      } 

    } 

  } 

  return largest; 

} 

9. Write a JavaScript function that returns the Fibonacci sequence up to a given number of terms. 


function fibonacciSequence(numTerms) { 

  if (numTerms <= 0) return []; 

  if (numTerms === 1) return [0]; 

   

  let sequence = [0, 1]; 

  while (sequence.length < numTerms) { 

    let nextNumber = sequence[sequence.length – 1] + sequence[sequence.length – 2]; 

    sequence.push(nextNumber); 

  } 

  return sequence; 

} 

10. Write a JavaScript program to convert a string to title case (capitalize the first letter of each word). 


function toTitleCase(str) { 

  return str.replace(/\b\w/g, l => l.toUpperCase()); 

} 


Advanced JavaScript coding interview questions

1. Implement a debounce function in JavaScript that limits the frequency of a function’s execution when it’s called repeatedly within a specified time frame. 

function debounce(func, delay) { 

  let timer; 

  return function() { 

    clearTimeout(timer); 

    timer = setTimeout(func, delay); 

  }; 

} 

2. Write a function that takes an array of objects and a key, and returns a new array sorted based on the values of that key in ascending order. 

function sortByKey(arr, key) { 

  return arr.sort((a, b) => a[key] – b[key]); 

} 

3. Implement a deep clone function in JavaScript that creates a copy of a nested object or array without any reference to the original. 

function deepClone(obj) { 

  return JSON.parse(JSON.stringify(obj)); 

}

4. Write a recursive function to calculate the factorial of a given number. 


function factorial(num) { 

  if (num <= 1) return 1; 

  return num * factorial(num – 1); 

} 

5. Implement a function that takes two sorted arrays and merges them into a single sorted array without using any built-in sorting functions. 

function mergeSortedArrays(arr1, arr2) { 

  return […arr1, …arr2].sort((a, b) => a – b); 

} 

6. Write a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring case. 

function isPalindrome(str) { 

  const cleanStr = str.replace(/[^a-zA-Z0-9]/g, ”).toLowerCase(); 

  const reversedStr = cleanStr.split(”).reverse().join(”); 

  return cleanStr === reversedStr; 

} 

7. Create a JavaScript class for a linked list with methods to insert a node at the beginning, end, or at a specific position, and to delete a node from a given position. 

8. Implement a function that flattens a nested array in JavaScript, converting it into a single-level array. 

const flattenArray = (nestedArray) => { 

  return nestedArray.flat(Infinity); 

}; 

9. Write a function that determines if two strings are anagrams of each other  

function areAnagrams(str1, str2) { 

  return str1.split(“”).sort().join(“”) === str2.split(“”).sort().join(“”); 

} 

10. Create a JavaScript function that returns the Fibonacci sequence up to a given number, utilizing memoization for optimized performance. 

function fibonacciWithMemoization(n) { 

  let memo = [0, 1]; 

  for (let i = 2; i <= n; i++) { 

    memo[i] = memo[i – 1] + memo[i – 2]; 

  } 

  return memo; 

}
 

Common JavaScript coding interview questions 

1. Write a function to check if a given string is a palindrome. 

function isPalindrome(str) { 

  return str.toLowerCase() === str.toLowerCase().split(”).reverse().join(”); 

} 

2. Implement a function to reverse a string without using the built-in reverse() method. 

function reverseString(str) { 

  let reversed = ”; 

  for (let i = str.length – 1; i >= 0; i–) { 

    reversed += str[i]; 

  } 

  return reversed; 

} 

3. Given an array of numbers, write a function to find the largest and smallest numbers in the array. 

function findMinMax(arr) { 

  let min = Math.min(…arr); 

  let max = Math.max(…arr); 

  return [min, max]; 

}

4. Write a function that takes an array of integers as input and returns a new array with only the unique elements. 

function getUniqueElements(arr) { 

  return Array.from(new Set(arr)); 

} 

5. Implement a function to find the factorial of a given number. 

function factorial(number) { 

  if (number === 0 || number === 1) return 1; 

  return number * factorial(number – 1); 

} 

6. Write a function that determines if a given number is prime or not. 

function isPrime(num) { 

  if (num <= 1) return false; 

  for (let i = 2; i <= Math.sqrt(num); i++) { 

    if (num % i === 0) return false; 

  } 

  return true; 

} 

7. Implement a function to find the sum of all the numbers in an array. 

function findSum(arr) { 

  return arr.reduce((sum, num) => sum + num, 0); 

} 

8. Given a string, write a function to count the occurrences of each character in the string. 

function countCharacterOccurrences(str) { 

  const charCount = {}; 

  for (let char of str) { 

    charCount[char] = (charCount[char] || 0) + 1; 

  } 

  return charCount; 

} 

9. Implement a function to remove duplicates from an array. 

The following function duplicates from an array by converting it into a Set. This automatically removes duplicates. Next, the function converts the Set back into an array. 

function removeDuplicates(arr) { 

  return Array.from(new Set(arr)); 

} 

10. Write a function that sorts an array of numbers in ascending order. 

function ascendingSort(numbers) { 

  return numbers.sort((a, b) => a – b); 

}


Tricky JavaScript coding questions

1. Write a function that reverses the order of words in a sentence without using the built-in reverse() method. 

function reverseSentence(sentence) { 

  const words = sentence.split(‘ ‘); 

  const reversedWords = words.reverse(); 

  return reversedWords.join(‘ ‘); 

} 

2. Implement a function that checks if a given string is a palindrome (reads the same forwards and backwards) while ignoring whitespace and punctuation. 

function isPalindrome(str) { 

  const cleanedStr = str.replace(/[^\w]/g, ”).toLowerCase(); 

  const reversedStr = cleanedStr.split(”).reverse().join(”); 

  return cleanedStr === reversedStr; 

} 

3. Write a function that takes an array of integers and returns the largest difference between any two numbers in the array. 

function largestDifference(arr) { 

  let min = arr[0]; 

  let maxDiff = 0; 

  for (let i = 1; i < arr.length; i++) { 

    if (arr[i] < min) { 

      min = arr[i]; 

    }

else { 

      const diff = arr[i] – min; 

      if (diff > maxDiff) { 

        maxDiff = diff; 

      } 

    } 

  } 

  return maxDiff; 

} 

4. Implement a function that removes duplicates from an array, keeping only the unique elements. 

function removeDuplicates(arr) { 

  return arr.filter((item, index) => arr.indexOf(item) === index); 

} 

5. Write a function that accepts a number and returns its factorial (e.g., factorial of 5 is 5 x 4 x 3 x 2 x 1). 

function factorial(num) { 

  if (num === 0 || num === 1) { 

    return 1; 

  } else { 

    return num * factorial(num – 1); 

  } 

} 

6. Implement a function that flattens a nested array into a single-dimensional array. 

function flattenArray(arr) { 

  return arr.flat(); 

} 

7. Write a function that checks if a given string is an anagram of another string (contains the same characters in a different order). 

 function isAnagram(str1, str2) { 

  const sortedStr1 = str1.split(”).sort().join(”); 

  const sortedStr2 = str2.split(”).sort().join(”); 

  return sortedStr1 === sortedStr2; 

} 

8. Implement a function that finds the second smallest element in an array of integers. 

function secondSmallest(arr) { 

  const sortedArr = arr.sort((a, b) => a – b); 

  return sortedArr[1]; 

} 

9. Write a function that generates a random alphanumeric string of a given length. 

function generateRandomString(length) { 

  const characters = ‘ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789’; 

  let result = ”; 

  for (let i = 0; i < length; i++) { 

    const randomIndex = Math.floor(Math.random() * characters.length); 

    result += characters.charAt(randomIndex); 

  } 

  return result; 

} 

10. Implement a function that converts a number to its Roman numeral representation. 

function toRomanNumeral(number) { 

  // Implement your code here 

} 

 

JavaScript array coding questions

1. Write a function that returns the sum of all numbers in an array. 

function sumArray(arr) { 

  return arr.reduce((total, num) => total + num, 0); 

} 

2. Implement a function that finds the maximum number in an array. 

function findMaxNumber(arr) { 

  let max = arr[0]; 

  for (let i = 1; i < arr.length; i++) { 

    if (arr[i] > max) { 

      max = arr[i]; 

    } 

  } 

  return max; 

} 

3. Write a function that returns a new array containing only the unique elements from an input array. 

function getUniqueElements(inputArray) { 

  return […new Set(inputArray)]; 

} 

4. Implement a function that returns the average value of numbers in an array. 

function calculateAverage(numbers) { 

  let sum = 0; 

  for (let number of numbers) { 

    sum += number; 

  } 

  return sum / numbers.length; 

} 

5. Write a function that sorts an array of strings in alphabetical order. 

function sortStrings(arr) { 

  return arr.slice().sort(); 

} 

6. Implement a function that finds the index of a specific element in an array. If the element is not found, the function should return -1. 

function findElementIndex(arr, element) { 

  const index = arr.indexOf(element); 

  return index !== -1 ? index : -1; 

} 

7. Write a function that removes all falsy values (false, null, 0, “”, undefined, and NaN) from an array. 

function removeFalsyValues(arr) { 

  return arr.filter(Boolean); 

} 

8. Implement a function that merges two arrays into a single array, alternating elements from each array. 

function mergeArrays(array1, array2) { 

  const mergedArray = []; 

  const maxLength = Math.max(array1.length, array2.length); 

  for (let i = 0; i < maxLength; i++) { 

    if (i < array1.length) mergedArray.push(array1[i]); 

    if (i < array2.length) mergedArray.push(array2[i]); 

  } 

  return mergedArray; 

} 

9. Write a function that finds the second largest number in an array. 

function findSecondLargest(arr) { 

  arr.sort((a, b) => b – a); 

  return arr[1]; 

} 

10. Implement a function that groups elements in an array based on a given condition. For example, grouping even and odd numbers into separate arrays. 

function groupByCondition(arr, condition) { 

  return [ 

    arr.filter(element => condition(element)), 

    arr.filter(element => !condition(element)) 

  ]; 

}